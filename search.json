[{"path":"https://hungms.github.io/strpip/articles/interoperability.html","id":"gct-files","dir":"Articles","previous_headings":"","what":"GCT files","title":"Interoperability with file formats","text":"","code":"# Save expression matrix as GCT file temp_gct <- tempfile(fileext = \".gct\") write_gct(counts, file = temp_gct)  # Load expression matrix from GCT file counts <- read_gct(temp_gct) counts[1:5, 1:5] ##           sample1    sample2    sample3    sample4      sample5 ## gene1 -0.56047565 -1.0678237 -0.6947070  0.3796395  0.005764186 ## gene2 -0.23017749 -0.2179749 -0.2079173 -0.5023235  0.385280401 ## gene3  1.55870831 -1.0260044 -1.2653964 -0.3332074 -0.370660032 ## gene4  0.07050839 -0.7288912  2.1689560 -1.0185754  0.644376549 ## gene5  0.12928774 -0.6250393  1.2079620 -1.0717912 -0.220486562 dim(counts) ## [1] 20  5"},{"path":"https://hungms.github.io/strpip/articles/interoperability.html","id":"gmt-files","dir":"Articles","previous_headings":"","what":"GMT files","title":"Interoperability with file formats","text":"","code":"# Create a list of gene lists xy.genes <- get_xy_genes(org = \"mouse\") mt.genes <- get_mt_genes(org = \"mouse\") vdj.genes <- get_str_genes(org = \"mouse\", str = c(\"tcr\", \"bcr\")) gene.list <- list(XY = xy.genes, MT = mt.genes, VDJ = vdj.genes) # Save gene list as GMT file temp_gmt <- tempfile(fileext = \".gmt\") write_gmt(gene.list, file = temp_gmt) ## GMT file written to /tmp/RtmpUxXqjo/file1f6f4c7311e1.gmt # Load gene list from GMT file   gmt <- read_gmt(temp_gmt) head(gmt) ##        XY      MT      VDJ ## 1 Gm28489   mt-Tf    Igll1 ## 2 Gm21867 mt-Rnr1 Trbv13-1 ## 3 Gm29448   mt-Tv Trbv12-2 ## 4 Gm21127 mt-Rnr2 Trbv13-2 ## 5 Gm28488  mt-Tl1 Trbv12-3 ## 6 Gm20816  mt-Nd1 Trbv13-3 # Convert list to data frame gene.df <- list_to_df(gene.list) head(gene.df) ##        XY      MT      VDJ ## 1 Gm28489   mt-Tf    Igll1 ## 2 Gm21867 mt-Rnr1 Trbv13-1 ## 3 Gm29448   mt-Tv Trbv12-2 ## 4 Gm21127 mt-Rnr2 Trbv13-2 ## 5 Gm28488  mt-Tl1 Trbv12-3 ## 6 Gm20816  mt-Nd1 Trbv13-3 # Save gene data frame as GMT file temp_gmt <- tempfile(fileext = \".gmt\") write_gmt(gene.df, file = temp_gmt) ## GMT file written to /tmp/RtmpUxXqjo/file1f6f3a90225d.gmt # Load gene data frame from GMT file   gmt <- read_gmt(temp_gmt) head(gmt) ##        XY      MT      VDJ ## 1 Gm28489   mt-Tf    Igll1 ## 2 Gm21867 mt-Rnr1 Trbv13-1 ## 3 Gm29448   mt-Tv Trbv12-2 ## 4 Gm21127 mt-Rnr2 Trbv13-2 ## 5 Gm28488  mt-Tl1 Trbv12-3 ## 6 Gm20816  mt-Nd1 Trbv13-3"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"remove-xy-mt-vdj-genes","dir":"Articles","previous_headings":"","what":"Remove XY, MT, VDJ genes","title":"Get Started","text":"","code":"# Remove xy-related genes from matrix xy.genes <- get_xy_genes(org = \"mouse\") head(xy.genes) ## [1] \"Gm28489\" \"Gm21867\" \"Gm29448\" \"Gm21127\" \"Gm28488\" \"Gm20816\" counts <- counts[!rownames(counts) %in% xy.genes,] dim(counts) ## [1] 50450    11 # Remove mt-related genes from matrix mt.genes <- get_mt_genes(org = \"mouse\") head(mt.genes) ## [1] \"mt-Tf\"   \"mt-Rnr1\" \"mt-Tv\"   \"mt-Rnr2\" \"mt-Tl1\"  \"mt-Nd1\" counts <- counts[!rownames(counts) %in% mt.genes,] dim(counts) ## [1] 50426    11 # Remove vdj-related genes from matrix vdj.genes <- get_str_genes(org = \"mouse\", str = c(\"tcr\", \"bcr\")) head(vdj.genes) ## [1] \"Igll1\"    \"Trbv13-1\" \"Trbv12-2\" \"Trbv13-2\" \"Trbv12-3\" \"Trbv13-3\" counts <- counts[!rownames(counts) %in% vdj.genes,] dim(counts) ## [1] 49760    11"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"converting-a-vector-of-gene-symbols","dir":"Articles","previous_headings":"","what":"Converting a vector of gene symbols","title":"Get Started","text":"","code":"# Mouse to human human_genes <- convert_genes(rownames(counts), org.from = \"mouse\", org.to = \"human\", one.to.many = FALSE) head(human_genes) ## [1] \"RNASEK-C17orf49\" \"NCBP2AS2\"        \"C2orf68\"         \"C4orf19\"         ## [5] \"C4orf54\"         \"C11orf58\" length(human_genes) ## [1] 18746 # Human to mouse mouse_genes <- convert_genes(human_genes, org.from = \"human\", org.to = \"mouse\", one.to.many = FALSE) head(mouse_genes) ## [1] \"A1bg\"    \"A1cf\"    \"A2m\"     \"A3galt2\" \"A4galt\"  \"A4gnt\" length(mouse_genes) ## [1] 17115"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"converting-a-gene-expression-matrix","dir":"Articles","previous_headings":"","what":"Converting a gene expression matrix","title":"Get Started","text":"","code":"# Convert mouse gene symbols to human human_counts <- convert_exprs(as.matrix(counts), org.from = \"mouse\", org.to = \"human\", many.to.one = TRUE) ## Removed 8 rows with NA values or invalid gene symbols head(human_counts)[1:5, 1:5] ##         BM_IgA_3 BM_IgG_3 BM_IgG_1 BM_IgM_3 BM_IgG_2 ## A1BG           1        0        0        0        0 ## A1CF           0        0        0        0        0 ## A2M            1        0        1       14        2 ## A3GALT2        0        0        7        3        6 ## A4GALT       116      197      103       72      242 dim(human_counts) ## [1] 17115    11 human_counts <- convert_exprs(as.matrix(counts), org.from = \"mouse\", org.to = \"human\", many.to.one = FALSE) ## Removed 8 rows with NA values or invalid gene symbols head(human_counts)[1:5, 1:5] ##          BM_IgA_1 BM_IgA_2 BM_IgA_3 BM_IgA_4 BM_IgG_1 ## NCBP2AS2      191      190      197      160      147 ## C2orf68       213      275      339      284      202 ## C4orf19         0        0        0        0        1 ## C4orf54        10        4        9        8        2 ## C11orf58      827      693      825      861      951 dim(human_counts) ## [1] 16116    11"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"annotate-gene-function-from-omnipath","dir":"Articles","previous_headings":"","what":"Annotate gene function from OmniPath","title":"Get Started","text":"","code":"# run annotation requires a gene symbol column in the expression matrix counts$gene <- rownames(counts)  # run annotation counts.annotated <- run_annotation(counts, gene_column = \"gene\", org.from = \"mouse\", org.to = \"human\", one.to.many = FALSE) ## Removed 8 rows with NA values or invalid gene symbols head(counts.annotated) ##   BM_IgA_1 BM_IgA_2 BM_IgA_3 BM_IgA_4 BM_IgG_1 BM_IgG_2 BM_IgG_3 BM_IgG_4 ## 1       18        8       18       11       12       15       12       12 ## 2        0        0       11        0        0        0        1        1 ## 3      102       93      124      128      126      125      131      171 ## 4       50       11       22       13       21       37        9       11 ## 5        5       10        3        4        3        1        5        2 ## 6       76       86       88      119       64       29       55       86 ##   BM_IgM_1 BM_IgM_3 BM_IgM_4          gene mouse_chromosome human_gene_symbol ## 1       19       30       20 0610005C13Rik             <NA>              <NA> ## 2        0        1        0 0610006L08Rik             <NA>              <NA> ## 3      258      207      198 0610009B22Rik             <NA>              <NA> ## 4       22       23       19 0610009E02Rik             <NA>              <NA> ## 5       12       12        4 0610009L18Rik             <NA>              <NA> ## 6      106      118      157 0610010K14Rik               11   RNASEK-C17orf49 ##   human_chromosome human_gene_symbol_unique human_chromosome_unique entity_type ## 1             <NA>                     <NA>                    <NA>        <NA> ## 2             <NA>                     <NA>                    <NA>        <NA> ## 3             <NA>                     <NA>                    <NA>        <NA> ## 4             <NA>                     <NA>                    <NA>        <NA> ## 5             <NA>                     <NA>                    <NA>        <NA> ## 6               17          RNASEK-C17orf49                      17     protein ##        category        parent consensus_score is_cs      database_cs is_tf ## 1          <NA>          <NA>              NA    NA             <NA>    NA ## 2          <NA>          <NA>              NA    NA             <NA>    NA ## 3          <NA>          <NA>              NA    NA             <NA>    NA ## 4          <NA>          <NA>              NA    NA             <NA>    NA ## 5          <NA>          <NA>              NA    NA             <NA>    NA ## 6 intracellular intracellular               1 FALSE OmniPath, ComPPI FALSE ##   database_tf ## 1        <NA> ## 2        <NA> ## 3        <NA> ## 4        <NA> ## 5        <NA> ## 6        <NA> counts.annotated %>%   .$human_gene_symbol %>%   unique() %>%   length() ## [1] 16032"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Get Started","text":"","code":"sessionInfo() ## R version 4.5.0 (2025-04-11) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] strpip_0.1.3      biomaRt_2.64.0    data.table_1.17.2 magrittr_2.0.3    ## [5] rlang_1.1.6       stringr_1.5.1     tibble_3.2.1      tidyr_1.3.1       ## [9] dplyr_1.1.4       ##  ## loaded via a namespace (and not attached): ##  [1] KEGGREST_1.48.0         xfun_0.52               bslib_0.9.0             ##  [4] httr2_1.1.2             Biobase_2.68.0          vctrs_0.6.5             ##  [7] tools_4.5.0             generics_0.1.4          stats4_4.5.0            ## [10] curl_6.2.2              AnnotationDbi_1.70.0    RSQLite_2.3.11          ## [13] blob_1.2.4              pkgconfig_2.0.3         dbplyr_2.5.0            ## [16] desc_1.4.3              S4Vectors_0.46.0        lifecycle_1.0.4         ## [19] GenomeInfoDbData_1.2.14 compiler_4.5.0          textshaping_1.0.1       ## [22] Biostrings_2.76.0       progress_1.2.3          GenomeInfoDb_1.44.0     ## [25] htmltools_0.5.8.1       sass_0.4.10             yaml_2.3.10             ## [28] pillar_1.10.2           pkgdown_2.1.2           crayon_1.5.3            ## [31] jquerylib_0.1.4         cachem_1.1.0            tidyselect_1.2.1        ## [34] digest_0.6.37           stringi_1.8.7           purrr_1.0.4             ## [37] fastmap_1.2.0           cli_3.6.5               withr_3.0.2             ## [40] filelock_1.0.3          prettyunits_1.2.0       UCSC.utils_1.4.0        ## [43] rappdirs_0.3.3          bit64_4.6.0-1           rmarkdown_2.29          ## [46] XVector_0.48.0          httr_1.4.7              bit_4.6.0               ## [49] ragg_1.4.0              png_0.1-8               hms_1.1.3               ## [52] memoise_2.0.1           evaluate_1.0.3          knitr_1.50              ## [55] IRanges_2.42.0          BiocFileCache_2.16.0    glue_1.8.0              ## [58] DBI_1.2.3               xml2_1.3.8              BiocGenerics_0.54.0     ## [61] jsonlite_2.0.0          R6_2.6.1                systemfonts_1.2.3       ## [64] fs_1.6.6"},{"path":"https://hungms.github.io/strpip/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hung M. Author, maintainer.","code":""},{"path":"https://hungms.github.io/strpip/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"M H (2025). strpip: Data Structure Pipelines Genomic Analysis. R package version 0.1.3, https://hungms.github.io/deseq2pip/.","code":"@Manual{,   title = {strpip: Data Structure Pipelines for Genomic Analysis},   author = {Hung M},   year = {2025},   note = {R package version 0.1.3},   url = {https://hungms.github.io/deseq2pip/}, }"},{"path":"https://hungms.github.io/strpip/index.html","id":"strpip-data-structure-pipelines-for-genomic-analysis","dir":"","previous_headings":"","what":"Data Structure Pipelines for Genomic Analysis","title":"Data Structure Pipelines for Genomic Analysis","text":"comprehensive R package genomic data structure pipelines, providing tools data format conversions, gene symbol mapping, gene set operations, expression data processing, functional annotation integration.","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Data Structure Pipelines for Genomic Analysis","text":"detailed documentation examples, please visit latest documentation.","code":""},{"path":[]},{"path":"https://hungms.github.io/strpip/index.html","id":"gene-symbol-mapping","dir":"","previous_headings":"Features","what":"Gene Symbol Mapping","title":"Data Structure Pipelines for Genomic Analysis","text":"Convert human mouse gene symbols Map different gene ID types","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"specialized-gene-set-operations","dir":"","previous_headings":"Features","what":"Specialized Gene Set Operations","title":"Data Structure Pipelines for Genomic Analysis","text":"Identify X/Y chromosome genes Find mitochondrial genes Filter structural genes Perform set operations gene lists","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"expression-processing","dir":"","previous_headings":"Features","what":"Expression Processing","title":"Data Structure Pipelines for Genomic Analysis","text":"Summarize gene expression data Filter normalize expression matrices Handle duplicate gene entries","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"functional-annotation","dir":"","previous_headings":"Features","what":"Functional Annotation","title":"Data Structure Pipelines for Genomic Analysis","text":"Integrate pathway annotations Access OmniPath resources Perform enrichment analyses","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"data-format-operations","dir":"","previous_headings":"Features","what":"Data Format Operations","title":"Data Structure Pipelines for Genomic Analysis","text":"Read write GCT (Gene Cluster Text) files Read write GMT (Gene Matrix Transposed) files Convert different genomic data formats","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Structure Pipelines for Genomic Analysis","text":"can install development version strpip GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"hungms/strpip\")"},{"path":"https://hungms.github.io/strpip/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Data Structure Pipelines for Genomic Analysis","text":"package requires following dependencies, can installed : packages provide: - biomaRt: Access Ensembl BioMart databases - dplyr, tidyr, tibble, stringr: Data manipulation tools - magrittr: pipe operations - OmnipathR: Access protein interaction networks pathway data","code":"# Install CRAN packages install.packages(c(\"dplyr\", \"tidyr\", \"tibble\", \"stringr\", \"magrittr\"))  # Install Bioconductor packages if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(c(\"biomaRt\"))"},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for BCR genes — bcr.string","title":"Regular expression pattern for BCR genes — bcr.string","text":"Pattern identify B-cell receptor genes","code":""},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for BCR genes — bcr.string","text":"","code":"bcr.string"},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for BCR genes — bcr.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data frame between species efficiently — convert_df","title":"Convert data frame between species efficiently — convert_df","text":"Convert data frame species efficiently","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data frame between species efficiently — convert_df","text":"","code":"convert_df(   df,   gene_column,   org.from = \"human\",   org.to = \"mouse\",   one.to.many = FALSE )"},{"path":"https://hungms.github.io/strpip/reference/convert_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data frame between species efficiently — convert_df","text":"df Data frame containing gene symbols gene_column Column name containing gene symbols org.Source organism (\"human\" \"mouse\") org.Target organism (\"human\" \"mouse\") one..many TRUE, returns possible mappings","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data frame between species efficiently — convert_df","text":"Data frame converted gene symbols","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_exprs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert expression matrix or data frame between species efficiently — convert_exprs","title":"Convert expression matrix or data frame between species efficiently — convert_exprs","text":"Convert expression matrix data frame species efficiently","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_exprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert expression matrix or data frame between species efficiently — convert_exprs","text":"","code":"convert_exprs(   exprs,   org.from = \"human\",   org.to = \"mouse\",   many.to.one = TRUE,   normalized = FALSE )"},{"path":"https://hungms.github.io/strpip/reference/convert_exprs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert expression matrix or data frame between species efficiently — convert_exprs","text":"exprs Expression matrix, data frame, data.table org.Source organism (\"human\" \"mouse\") org.Target organism (\"human\" \"mouse\") many..one TRUE, aggregates multiple mappings normalized TRUE, uses mean; FALSE, uses sum","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_exprs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert expression matrix or data frame between species efficiently — convert_exprs","text":"Converted expression data type input","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert genes between species efficiently — convert_genes","title":"Convert genes between species efficiently — convert_genes","text":"Convert genes species efficiently","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert genes between species efficiently — convert_genes","text":"","code":"convert_genes(genes, org.from = \"human\", org.to = \"mouse\", one.to.many = FALSE)"},{"path":"https://hungms.github.io/strpip/reference/convert_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert genes between species efficiently — convert_genes","text":"genes Vector gene symbols convert org.Source organism (\"human\" \"mouse\") org.Target organism (\"human\" \"mouse\") one..many TRUE, returns possible mappings","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert genes between species efficiently — convert_genes","text":"Vector converted gene symbols","code":""},{"path":"https://hungms.github.io/strpip/reference/df_to_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to List — df_to_list","title":"Convert Data Frame to List — df_to_list","text":"Converts data frame list vectors, removing empty strings.","code":""},{"path":"https://hungms.github.io/strpip/reference/df_to_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to List — df_to_list","text":"","code":"df_to_list(df)"},{"path":"https://hungms.github.io/strpip/reference/df_to_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to List — df_to_list","text":"df data frame convert","code":""},{"path":"https://hungms.github.io/strpip/reference/df_to_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to List — df_to_list","text":"list vectors element corresponds column input data frame.","code":""},{"path":"https://hungms.github.io/strpip/reference/df_to_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to List — df_to_list","text":"","code":"if (FALSE) { # \\dontrun{ my_df <- data.frame(c(\"A\", \"B\", \"C\"), c(\"D\", \"E\"), c(\"F\", \"G\", \"H\", \"I\")) result <- df_to_list(my_df) print(result) } # }"},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Package startup message — .onAttach","title":"Package startup message — .onAttach","text":"Displays package version package attached","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package startup message — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package startup message — .onAttach","text":"libname library package installed pkgname name package","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize package when loaded — .onLoad","title":"Initialize package when loaded — .onLoad","text":"function called package loaded via library() require()","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize package when loaded — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize package when loaded — .onLoad","text":"libname library package installed pkgname name package","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Package Environment — .strpip_env","title":"Internal Package Environment — .strpip_env","text":"environment used store package-level data needs persist function calls without polluting user's global environment.","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Package Environment — .strpip_env","text":"","code":".strpip_env"},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Internal Package Environment — .strpip_env","text":"object class environment length 0.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_conversion_dict.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert mouse gene symbols — get_conversion_dict","title":"Convert mouse gene symbols — get_conversion_dict","text":"Converts vector mouse (MGI) gene symbols human (HGNC) equivalents. default, returns data frame possible mappings.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_conversion_dict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert mouse gene symbols — get_conversion_dict","text":"","code":"get_conversion_dict(org.from, org.to)"},{"path":"https://hungms.github.io/strpip/reference/get_conversion_dict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert mouse gene symbols — get_conversion_dict","text":"genes vector mouse gene symbols convert","code":""},{"path":"https://hungms.github.io/strpip/reference/get_conversion_dict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert mouse gene symbols — get_conversion_dict","text":"data frame possible mappings.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_conversion_dict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert mouse gene symbols — get_conversion_dict","text":"","code":"if (FALSE) { # \\dontrun{ mouse_genes <- c(\"Trp53\", \"Cd4\", \"Cd8a\") human_genes <- convert_mouse_to_human(mouse_genes) print(human_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes from mitochondrial chromosome — get_mt_genes","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"Retrieves gene symbols located mitochondrial chromosome specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"","code":"get_mt_genes(org, ...)"},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"org Organism query. Either \"human\" \"mouse\". ... Additional arguments passed import_biomart_human import_biomart_mouse.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"character vector containing mitochondrial gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"","code":"if (FALSE) { # \\dontrun{ mt_genes <- get_mt_genes(\"human\") head(mt_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes matching specific patterns — get_str_genes","title":"Get genes matching specific patterns — get_str_genes","text":"Retrieves gene symbols matching predefined patterns specific gene families (BCR, TCR, MHC, HB, RB, MT) specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes matching specific patterns — get_str_genes","text":"","code":"get_str_genes(org, str, ...)"},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes matching specific patterns — get_str_genes","text":"org Organism query. Either \"human\" \"mouse\". str Character vector patterns search . Valid options : \"bcr\", \"tcr\", \"mhc\", \"hb\", \"rb\", \"mt\".","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes matching specific patterns — get_str_genes","text":"character vector containing matching gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes matching specific patterns — get_str_genes","text":"","code":"if (FALSE) { # \\dontrun{ rb_genes <- get_str_genes(\"human\", \"rb\") head(rb_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes from X and Y chromosomes — get_xy_genes","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"Retrieves gene symbols located X Y chromosomes specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"","code":"get_xy_genes(org, ...)"},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"org Organism query. Either \"human\" \"mouse\". ... Additional arguments passed import_biomart_human import_biomart_mouse.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"character vector containing gene symbols X Y chromosomes.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"","code":"if (FALSE) { # \\dontrun{ xy_genes <- get_xy_genes(\"human\") head(xy_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for hemoglobin genes — hb.string","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"Pattern identify hemoglobin genes","code":""},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"","code":"hb.string"},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart","title":"Import BioMart data from Ensembl archive — import_biomart","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart","text":"","code":"import_biomart(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart","text":"","code":"if (FALSE) { # \\dontrun{ biodict <- import_biomart() head(biodict) } # }"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart_human","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"","code":"import_biomart_human(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"","code":"if (FALSE) { # \\dontrun{ biodict_mouse <- import_biomart_mouse() head(biodict_mouse) } # }"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart_mouse","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"","code":"import_biomart_mouse(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"","code":"if (FALSE) { # \\dontrun{ biodict_mouse <- import_biomart_mouse() head(biodict_mouse) } # }"},{"path":"https://hungms.github.io/strpip/reference/list_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List to Data Frame — list_to_df","title":"Convert List to Data Frame — list_to_df","text":"Converts list vectors data frame, padding shorter vectors empty strings match length longest vector.","code":""},{"path":"https://hungms.github.io/strpip/reference/list_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List to Data Frame — list_to_df","text":"","code":"list_to_df(list)"},{"path":"https://hungms.github.io/strpip/reference/list_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List to Data Frame — list_to_df","text":"list list vectors convert","code":""},{"path":"https://hungms.github.io/strpip/reference/list_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List to Data Frame — list_to_df","text":"data frame column corresponds vector input list. Shorter vectors padded empty strings match length longest vector.","code":""},{"path":"https://hungms.github.io/strpip/reference/list_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert List to Data Frame — list_to_df","text":"","code":"if (FALSE) { # \\dontrun{ my_list <- list(c(\"A\", \"B\", \"C\"), c(\"D\", \"E\"), c(\"F\", \"G\", \"H\", \"I\")) result <- list_to_df(my_list) print(result) } # }"},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for MHC genes — mhc.string","title":"Regular expression pattern for MHC genes — mhc.string","text":"Pattern identify major histocompatibility complex genes","code":""},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for MHC genes — mhc.string","text":"","code":"mhc.string"},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for MHC genes — mhc.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for mitochondrial genes — mt.string","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"Pattern identify mitochondrial genes","code":""},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"","code":"mt.string"},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://hungms.github.io/strpip/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for ribosomal genes — rb.string","title":"Regular expression pattern for ribosomal genes — rb.string","text":"Pattern identify ribosomal protein genes","code":""},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for ribosomal genes — rb.string","text":"","code":"rb.string"},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for ribosomal genes — rb.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GCT File — read_gct","title":"Read GCT File — read_gct","text":"Reads Gene Cluster Text (GCT) file converts data frame. GCT files commonly used gene expression data.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GCT File — read_gct","text":"","code":"read_gct(gct)"},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GCT File — read_gct","text":"gct Path GCT file","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GCT File — read_gct","text":"data frame : - Rows genes - Columns samples - Values expression measurements","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GCT File — read_gct","text":"","code":"if (FALSE) { # \\dontrun{ gct_data <- read_gct(\"path/to/expression.gct\") head(gct_data) } # }"},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GMT File — read_gmt","title":"Read GMT File — read_gmt","text":"Reads Gene Matrix Transposed (GMT) file converts data frame. GMT files commonly used gene set collections.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GMT File — read_gmt","text":"","code":"read_gmt(gmt)"},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GMT File — read_gmt","text":"gmt Path GMT file","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GMT File — read_gmt","text":"data frame : - Rows genes - Columns gene sets - Values indicate gene set membership","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GMT File — read_gmt","text":"","code":"if (FALSE) { # \\dontrun{ gmt_data <- read_gmt(\"path/to/genesets.gmt\") head(gmt_data) } # }"},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gene Annotations — run_annotation","title":"Add Gene Annotations — run_annotation","text":"Adds functional annotations data frame containing gene symbols using pre-computed OmniPath annotations. function supports human mouse gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gene Annotations — run_annotation","text":"","code":"run_annotation(   df,   gene_column = \"gene\",   org.from = \"human\",   org.to = \"mouse\",   release = \"105\",   one.to.many = FALSE )"},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gene Annotations — run_annotation","text":"df Data frame containing gene symbols gene_column Name column containing gene symbols. Default \"gene\" org.Organism type. Either \"human\" \"mouse\". Default \"human\" org.Target organism. Either \"human\" \"mouse\". Default \"mouse\" release Ensembl release version use annotations. Default \"105\" one..many Logical. Default FALSE return unique mappings (one/many one). TRUE, returns possible mouse gene mappings (one many), including cases one human gene maps multiple mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gene Annotations — run_annotation","text":"data frame additional columns containing functional annotations: - Pathway information - Protein-protein interactions - Gene regulatory relationships - functional annotations OmniPath","code":""},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":null,"dir":"Reference","previous_headings":"","what":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"comprehensive R package genomic data structure pipelines, providing tools : Data format conversions (GCT, GMT, TSV) Gene symbol mapping species Gene set operations filtering Gene expression data processing Functional annotation integration Specialized gene set identification (XY, MT, BCR, TCR, etc.)","code":""},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"Data Format Operations read_gmt(), read_gct(), write_gmt(), write_gct() Gene Symbol Mapping convert_mouse_to_human(), convert_human_to_mouse() Gene Set Operations get_xy_genes(), get_mt_genes(), get_str_genes() Expression Processing summarize_genes() Annotation run_annotation()","code":""},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"dependencies","dir":"Reference","previous_headings":"","what":"Dependencies","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"package depends : biomaRt: accessing Ensembl BioMart dplyr, tidyr, tibble, stringr: data manipulation magrittr: pipe operations OmniPathR: pathway data","code":""},{"path":[]},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"Maintainer: Hung M hungm@example.com","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Gene Expression — summarize_genes","title":"Summarize Gene Expression — summarize_genes","text":"function aggregates expression values multiple isoforms gene single gene-level expression value.","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Gene Expression — summarize_genes","text":"","code":"summarize_genes(input, gene_sym_vec, normalized = FALSE)"},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Gene Expression — summarize_genes","text":"input Gene expression data isoforms/peaks rows samples columns. Can data frame, data.table, matrix. gene_sym_vec Vector gene symbols corresponding isoform/peak normalized Logical. TRUE, calculates mean expression across isoforms/peaks. FALSE, calculates sum expression across isoforms/peaks. Default FALSE","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Gene Expression — summarize_genes","text":"data frame, data.table, matrix unique gene names row names. Output type matches class input.","code":""},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for TCR genes — tcr.string","title":"Regular expression pattern for TCR genes — tcr.string","text":"Pattern identify T-cell receptor genes","code":""},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for TCR genes — tcr.string","text":"","code":"tcr.string"},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for TCR genes — tcr.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input data structure — validate_df","title":"Validate input data structure — validate_df","text":"Validate input data structure","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input data structure — validate_df","text":"","code":"validate_df(df, gene_column = NULL)"},{"path":"https://hungms.github.io/strpip/reference/validate_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate input data structure — validate_df","text":"df data frame matrix validate gene_column Column name containing gene symbols (data frames) NULL matrix","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate input data structure — validate_df","text":"Validated data frame","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_exprs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate expression data — validate_exprs","title":"Validate expression data — validate_exprs","text":"Validate expression data","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_exprs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate expression data — validate_exprs","text":"","code":"validate_exprs(exprs)"},{"path":"https://hungms.github.io/strpip/reference/validate_exprs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate expression data — validate_exprs","text":"exprs Expression matrix data frame validate","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_exprs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate expression data — validate_exprs","text":"Validated data frame gene column","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_org.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Org Parameters — validate_org","title":"Validate Org Parameters — validate_org","text":"Validate Org Parameters","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_org.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Org Parameters — validate_org","text":"","code":"validate_org(org, genes = NULL)"},{"path":"https://hungms.github.io/strpip/reference/validate_org.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Org Parameters — validate_org","text":"org Organism type, either \"human\" \"mouse\" genes Gene symbols validate","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_org.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Org Parameters — validate_org","text":"Logical indicating whether genes valid","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GCT File — write_gct","title":"Write GCT File — write_gct","text":"Saves data frame Gene Cluster Text (GCT) file. output file formatted according GCT specification.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GCT File — write_gct","text":"","code":"write_gct(df, file)"},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GCT File — write_gct","text":"df Data frame save save_name Name output file save_dir Directory save file . Defaults current working directory.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GCT File — write_gct","text":"return value. Creates GCT file specified location.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GCT File — write_gct","text":"","code":"if (FALSE) { # \\dontrun{ write_gct(expression_df, \"my_expression.gct\", \"output/\") } # }"},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GMT File — write_gmt","title":"Write GMT File — write_gmt","text":"Saves data frame list Gene Matrix Transposed (GMT) file. output file formatted according GMT specification.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GMT File — write_gmt","text":"","code":"write_gmt(input, file)"},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GMT File — write_gmt","text":"input data frame columns gene sets values genes, named list element character vector genes file Output file path","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GMT File — write_gmt","text":"return value. Creates GMT file specified location.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GMT File — write_gmt","text":"","code":"if (FALSE) { # \\dontrun{ # Using a data frame write_gmt(gene_sets_df, \"my_genesets.gmt\")  # Using a list gene_sets_list <- list(   pathway1 = c(\"gene1\", \"gene2\", \"gene3\"),   pathway2 = c(\"gene2\", \"gene4\", \"gene5\") ) write_gmt(gene_sets_list, \"my_genesets.gmt\") } # }"}]
