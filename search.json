[{"path":"https://hungms.github.io/strpip/articles/database.html","id":"retrieve-biomrt-database","dir":"Articles","previous_headings":"","what":"Retrieve biomRt database","title":"Build OmniPathR databases","text":"","code":"# Import biomart database - this returns the biomart_dict directly now biomart_dict_mouse <- import_biomart_mouse(local = T) biomart_dict_human <- import_biomart_human(local = T) head(biomart_dict_mouse) ##   mouse_gene_symbol mouse_chromosome ## 1             mt-Tf               MT ## 2           mt-Rnr1               MT ## 3             mt-Tv               MT ## 4           mt-Rnr2               MT ## 5            mt-Tl1               MT ## 6            mt-Nd1               MT head(biomart_dict_human) ##   human_gene_symbol human_chromosome ## 1             MT-TF               MT ## 2           MT-RNR1               MT ## 3             MT-TV               MT ## 4           MT-RNR2               MT ## 5            MT-TL1               MT ## 6            MT-ND1               MT # save biomart_dict to TSV file - only run this if you need to update the data #write.table(biomart_dict_mouse, \"inst/extdata/release-105_biomart_dict_mouse.tsv\", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\") #write.table(biomart_dict_human, \"inst/extdata/release-105_biomart_dict_human.tsv\", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\") # Import biomart database - this returns the biomart_dict directly now # biomart_dict <- import_biomart() biomart_dict_orthologs <- import_biomart_orthologs(local = T) head(biomart_dict_orthologs) ##   mouse_gene_symbol mouse_chromosome human_gene_symbol human_chromosome ## 1            mt-Nd4               MT            MT-ND4               MT ## 2            mt-Nd1               MT            MT-ND1               MT ## 3            mt-Nd2               MT            MT-ND2               MT ## 4            mt-Nd6               MT            MT-ND6               MT ## 5            mt-Nd5               MT            MT-ND5               MT ## 6            mt-Co3               MT            MT-CO3               MT # save biomart_dict to TSV file - only run this if you need to update the data # write.table(biomart_dict_orthologs, \"inst/extdata/release-105_biomart_dict_orthologs.tsv\", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")"},{"path":"https://hungms.github.io/strpip/articles/database.html","id":"build-omnipathr-databases-for-gene-annotation","dir":"Articles","previous_headings":"","what":"Build OmniPathR databases for gene annotation","title":"Build OmniPathR databases","text":"","code":"# add human_gene_symbol and database_cs columns biomart_dict <- import_biomart_orthologs(local = T) biomart_dict <- biomart_dict %>%      dplyr::filter(human_gene_symbol != \"\") %>%     group_by(human_gene_symbol, human_chromosome) %>%     summarize(         mouse_gene_symbol = paste0(mouse_gene_symbol, collapse = \", \"),          mouse_chromosome = paste0(mouse_chromosome, collapse = \", \")) %>%     mutate(         mouse_gene_symbol_unique = gsub(\",.*\", \"\", mouse_gene_symbol),         mouse_chromosome_unique = gsub(\",.*\", \"\", mouse_chromosome)) # import OmniPathR databases for human gene annotation human.omnipath.db <- OmnipathR::import_omnipath_intercell() human.omnipath.db %>% head()  human.omnipath.db <- human.omnipath.db %>%     mutate(         human_gene_symbol =  genesymbol,         database_cs = ifelse(str_detect(database, \"UniProt\"), \"UniProt\", database)) %>%     merge(., biomart_dict, by = \"human_gene_symbol\", all.x = T) %>%     dplyr::select(-c(\"genesymbol\")) # select columns of interest for gene annotation # annotate genes that are transmembrane proteinsm, cell surface, adhesion-related human.omnipath.db <- human.omnipath.db %>%     dplyr::select(human_gene_symbol, human_chromosome, mouse_gene_symbol, mouse_chromosome, mouse_gene_symbol_unique, mouse_chromosome_unique, entity_type, category, parent, consensus_score, database_cs) %>%     arrange(human_gene_symbol) %>%     group_by(human_gene_symbol) %>%     summarize(         human_chromosome = unique(human_chromosome),         mouse_gene_symbol = unique(mouse_gene_symbol),         mouse_chromosome = unique(mouse_chromosome),         mouse_gene_symbol_unique = unique(mouse_gene_symbol_unique),         mouse_chromosome_unique = unique(mouse_chromosome_unique),         entity_type = unique(entity_type),         category = paste0(unique(category), collapse = \", \"),         parent = paste0(unique(parent), collapse = \", \"),         consensus_score = max(consensus_score, na.rm = TRUE),         is_cs = ifelse(str_detect(parent, \"transmembrane|cell_surface|adhesion|junction\"), TRUE, FALSE),         database_cs = paste0(unique(database_cs), collapse = \", \"),         ) %>%     ungroup()  # visualize output head(human.omnipath.db) # import OmniPathR databases for human transcriptional interactions human.regulon.db <- OmnipathR::import_transcriptional_interactions(organism = 9606) head(human.regulon.db) # select columns of interest for gene annotation # annotate genes that are transcription factors human.regulon.db <- human.regulon.db %>%     group_by(source_genesymbol) %>%     separate_rows(source_genesymbol, sep = \"_\") %>%     separate_rows(sources, sep = \";\") %>%     mutate(human_gene_symbol = source_genesymbol) %>%     group_by(human_gene_symbol) %>%     summarize(database_tf = paste0(unique(sources), collapse = \";\"))  head(human.regulon.db) # merge cell surface and transcription factor annotations human.omnipath.db <- human.omnipath.db %>%     mutate(is_tf = ifelse(human_gene_symbol %in% human.regulon.db$human_gene_symbol, TRUE, FALSE)) %>%     merge(., human.regulon.db, by = \"human_gene_symbol\", all.x = TRUE)  head(human.omnipath.db) # save OmniPathR databases for human gene annotation in TSV file # write.table(human.omnipath.db, \"inst/extdata/release-105_human_omnipath_db.tsv\", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")"},{"path":"https://hungms.github.io/strpip/articles/database.html","id":"build-mouse-omnipath-database","dir":"Articles","previous_headings":"","what":"Build mouse omnipath database","title":"Build OmniPathR databases","text":"","code":"# add human_gene_symbol and database_cs columns biomart_dict <- import_biomart_orthologs(local = T) biomart_dict <- biomart_dict %>%      dplyr::filter(mouse_gene_symbol != \"\") %>%      dplyr::filter(human_gene_symbol != \"\") %>%     group_by(human_gene_symbol, human_chromosome) %>%     summarize(         mouse_gene_symbol = paste0(mouse_gene_symbol, collapse = \", \"),          mouse_chromosome = paste0(mouse_chromosome, collapse = \", \")) %>%     mutate(         mouse_gene_symbol_unique = gsub(\",.*\", \"\", mouse_gene_symbol),         mouse_chromosome_unique = gsub(\",.*\", \"\", mouse_chromosome)) # import OmniPathR databases for mouse gene annotation mouse.omnipath.db <- OmnipathR::import_omnipath_intercell(organism = 10090) head(mouse.omnipath.db)  mouse.omnipath.db <- mouse.omnipath.db %>%     mutate(         human_gene_symbol = genesymbol,         database_cs = ifelse(str_detect(database, \"UniProt\"), \"UniProt\", database)) %>%     merge(., biomart_dict, by = \"human_gene_symbol\", all.x = T) %>%     dplyr::select(-c(\"genesymbol\")) %>%     separate_rows(mouse_gene_symbol, mouse_chromosome, sep = \", \")  head(mouse.omnipath.db) # select columns of interest for gene annotation # annotate genes that are transmembrane proteinsm, cell surface, adhesion-related mouse.omnipath.db <- mouse.omnipath.db %>%     filter(mouse_gene_symbol != \"\") %>%     arrange(mouse_gene_symbol, human_gene_symbol) %>%     group_by(mouse_gene_symbol) %>%     summarize(         mouse_chromosome = paste0(unique(mouse_chromosome), collapse = \", \"),         human_gene_symbol = paste0(unique(human_gene_symbol), collapse = \", \"),         human_chromosome = paste0(unique(human_chromosome), collapse = \", \"),         human_gene_symbol_unique = gsub(\",.*\", \"\", human_gene_symbol),         human_chromosome_unique = gsub(\",.*\", \"\", human_chromosome),         entity_type = paste0(unique(entity_type), collapse = \", \"),         category = paste0(unique(category), collapse = \", \"),         parent = paste0(unique(parent), collapse = \", \"),         consensus_score = max(consensus_score, na.rm = TRUE),         is_cs = ifelse(str_detect(parent, \"transmembrane|cell_surface|adhesion|junction\"), TRUE, FALSE),         database_cs = paste0(unique(database_cs), collapse = \", \")         ) %>%     dplyr::select(mouse_gene_symbol, mouse_chromosome, human_gene_symbol, human_chromosome, human_gene_symbol_unique, human_chromosome_unique, entity_type, category, parent, consensus_score, is_cs, database_cs) %>%     ungroup()  # visualize output head(mouse.omnipath.db) # import OmniPathR databases for mouse transcriptional interactions mouse.regulon.db <- OmnipathR::import_transcriptional_interactions(organism = 10090) head(mouse.regulon.db) # select columns of interest for gene annotation # annotate genes that are transcription factors mouse.regulon.db <- mouse.regulon.db %>%     group_by(source_genesymbol) %>%     separate_rows(source_genesymbol, sep = \"_\") %>%     separate_rows(sources, sep = \";\") %>%     mutate(mouse_gene_symbol = source_genesymbol) %>%     group_by(mouse_gene_symbol) %>%     summarize(database_tf = paste0(unique(sources), collapse = \";\"))  head(mouse.regulon.db) # merge cell surface and transcription factor annotations mouse.omnipath.db <- mouse.omnipath.db %>%     mutate(is_tf = ifelse(mouse_gene_symbol %in% mouse.regulon.db$mouse_gene_symbol, TRUE, FALSE)) %>%     merge(., mouse.regulon.db, by = \"mouse_gene_symbol\", all.x = TRUE) head(mouse.omnipath.db) # save OmniPathR databases for mouse gene annotation in TSV file #write.table(mouse.omnipath.db, \"inst/extdata/release-105_mouse_omnipath_db.tsv\", col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")"},{"path":"https://hungms.github.io/strpip/articles/interoperability.html","id":"gct-files","dir":"Articles","previous_headings":"","what":"GCT files","title":"Interoperability with file formats","text":"","code":"# Save expression matrix as GCT file temp_gct <- tempfile(fileext = \".gct\") write_gct(counts, save_name = basename(temp_gct), save_dir = dirname(temp_gct)) # Load expression matrix from GCT file counts <- read_gct(temp_gct) counts[1:5, 1:5] ##           sample1    sample2    sample3    sample4      sample5 ## gene1 -0.56047565 -1.0678237 -0.6947070  0.3796395  0.005764186 ## gene2 -0.23017749 -0.2179749 -0.2079173 -0.5023235  0.385280401 ## gene3  1.55870831 -1.0260044 -1.2653964 -0.3332074 -0.370660032 ## gene4  0.07050839 -0.7288912  2.1689560 -1.0185754  0.644376549 ## gene5  0.12928774 -0.6250393  1.2079620 -1.0717912 -0.220486562 dim(counts) ## [1] 20  5"},{"path":"https://hungms.github.io/strpip/articles/interoperability.html","id":"gmt-files","dir":"Articles","previous_headings":"","what":"GMT files","title":"Interoperability with file formats","text":"","code":"# Create a list of gene lists xy.genes <- get_xy_genes(org = \"mouse\") mt.genes <- get_mt_genes(org = \"mouse\") vdj.genes <- get_str_genes(org = \"mouse\", str = c(\"tcr\", \"bcr\")) gene.list <- list(XY = xy.genes, MT = mt.genes, VDJ = vdj.genes)  # Convert list to data frame gene.df <- convert_list_to_df(gene.list) head(gene.df) ##        XY      MT      VDJ ## 1 Gm28489   mt-Tf    Igll1 ## 2 Gm21867 mt-Rnr1 Trbv13-1 ## 3 Gm29448   mt-Tv Trbv12-2 ## 4 Gm21127 mt-Rnr2 Trbv13-2 ## 5 Gm28488  mt-Tl1 Trbv12-3 ## 6 Gm20816  mt-Nd1 Trbv13-3 # Save gene list as GMT file temp_gmt <- tempfile(fileext = \".gmt\") write_gmt(gene.df, save_name = basename(temp_gmt), save_dir = dirname(temp_gmt)) # Load gene list from GMT file   gmt <- read_gmt(temp_gmt) head(gmt) ##         XY      MT      VDJ ## V3 Gm28489   mt-Tf    Igll1 ## V4 Gm21867 mt-Rnr1 Trbv13-1 ## V5 Gm29448   mt-Tv Trbv12-2 ## V6 Gm21127 mt-Rnr2 Trbv13-2 ## V7 Gm28488  mt-Tl1 Trbv12-3 ## V8 Gm20816  mt-Nd1 Trbv13-3"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"remove-xy-mt-vdj-genes","dir":"Articles","previous_headings":"","what":"Remove XY, MT, VDJ genes","title":"Get Started","text":"","code":"# Remove xy-related genes from matrix xy.genes <- get_xy_genes(org = \"mouse\") head(xy.genes) ## [1] \"Gm28489\" \"Gm21867\" \"Gm29448\" \"Gm21127\" \"Gm28488\" \"Gm20816\" counts <- counts[!rownames(counts) %in% xy.genes,] dim(counts) ## [1] 50450    11 # Remove mt-related genes from matrix mt.genes <- get_mt_genes(org = \"mouse\") head(mt.genes) ## [1] \"mt-Tf\"   \"mt-Rnr1\" \"mt-Tv\"   \"mt-Rnr2\" \"mt-Tl1\"  \"mt-Nd1\" counts <- counts[!rownames(counts) %in% mt.genes,] dim(counts) ## [1] 50426    11 # Remove vdj-related genes from matrix vdj.genes <- get_str_genes(org = \"mouse\", str = c(\"tcr\", \"bcr\")) head(vdj.genes) ## [1] \"Igll1\"    \"Trbv13-1\" \"Trbv12-2\" \"Trbv13-2\" \"Trbv12-3\" \"Trbv13-3\" counts <- counts[!rownames(counts) %in% vdj.genes,] dim(counts) ## [1] 49760    11"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"converting-orthologous-gene-symbols","dir":"Articles","previous_headings":"","what":"Converting orthologous gene symbols","title":"Get Started","text":"Convert human gene symbols mouse.","code":"# Convert mouse gene symbols to human human_genes <- convert_mouse_to_human(rownames(counts)) head(human_genes) ##   mouse_gene_symbol human_gene_symbol ## 1             Dgcr6                   ## 2             Prodh                   ## 3           Gm22809                   ## 4              Frg1                   ## 5             Tekt4             MAFIP ## 6            Mrpl23 mouse_genes <- convert_human_to_mouse(human_genes$human_gene_symbol) head(mouse_genes) ##   human_gene_symbol mouse_gene_symbol ## 1                               Dgcr6 ## 2                               Prodh ## 3                             Gm22809 ## 4                                Frg1 ## 5             MAFIP             Tekt4 ## 6                              Mrpl23 # Convert human gene symbols to mouse human_genes <- convert_orthologs_vector(rownames(counts), mode = \"mouse_to_human\", one.to.many = TRUE) head(human_genes) ## [1] \"\"         \"MAFIP\"    \"HSFY2\"    \"HSFY1\"    \"RNU2-57P\" \"DAZ4\" mouse_genes <- convert_orthologs_vector(human_genes, mode = \"human_to_mouse\", one.to.many = TRUE) head(mouse_genes) ## [1] \"Dgcr6\"   \"Prodh\"   \"Gm22809\" \"Frg1\"    \"Tekt4\"   \"Mrpl23\" # Convert mouse gene symbols to human human_counts <- convert_orthologs_matrix(counts, mode = \"mouse_to_human\", many.to.one = TRUE) head(human_counts)[1:5, 1:5] ##         BM_IgA_1 BM_IgA_2 BM_IgA_3 BM_IgA_4 BM_IgG_1 ##            87103    76892    88033    91809    71366 ## A1BG           0        5        1        0        0 ## A1CF           0        0        0        1        0 ## A2M           13       15        1       13        1 ## A3GALT2        3        8        0        0        7 human_counts <- convert_orthologs_matrix(counts, mode = \"mouse_to_human\", many.to.one = FALSE) head(human_counts)[1:5, 1:5] ##          BM_IgA_1 BM_IgA_2 BM_IgA_3 BM_IgA_4 BM_IgG_1 ## NCBP2AS2      191      190      197      160      147 ## C2orf68       213      275      339      284      202 ## C4orf19         0        0        0        0        1 ## C4orf54        10        4        9        8        2 ## C11orf58      827      693      825      861      951"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"annotate-gene-function-from-omnipath","dir":"Articles","previous_headings":"","what":"Annotate gene function from OmniPath","title":"Get Started","text":"","code":"# Check if OmnipathR is available if (!requireNamespace(\"OmnipathR\", quietly = TRUE)) {   message(\"OmnipathR is not installed. Skipping annotation example.\") } else {   # run annotation requires a gene symbol column in the expression matrix   counts$gene <- rownames(counts)    # run annotation   counts.annotated <- run_annotation(counts, gene_column = \"gene\", org = \"mouse\")      # Check if the annotation was successful   if (\"entity_type\" %in% colnames(counts.annotated)) {     head(subset(counts.annotated, !is.na(entity_type)))   } else {     message(\"Annotation data not found or annotation failed. This is expected if OmniPathR is not installed or annotation files are missing.\")     head(counts.annotated)   } } ##             gene BM_IgA_1 BM_IgA_2 BM_IgA_3 BM_IgA_4 BM_IgG_1 BM_IgG_2 BM_IgG_3 ## 6  0610010K14Rik       76       86       88      119       64       29       55 ## 10 0610030E20Rik      213      275      339      284      202      214      246 ## 17 0610040J01Rik        0        0        0        0        1        0        1 ## 41 1110032A03Rik      223      241      271      211      194      246      229 ## 42 1110032F04Rik        3       20       16        2        0        0        3 ## 45 1110038F14Rik      258      224      247      285      186      207      220 ##    BM_IgG_4 BM_IgM_1 BM_IgM_3 BM_IgM_4 mouse_chromosome human_gene_symbol ## 6        86      106      118      157               11   RNASEK-C17orf49 ## 10      306      267      519      422                6           C2orf68 ## 17        0        0        0        3                5           C4orf19 ## 41      190      454      439      243                9           C11orf1 ## 42        0        0        1        1                3           C3orf80 ## 45      217      282      341      283               15           C8orf33 ##    human_chromosome human_gene_symbol_unique human_chromosome_unique ## 6                17          RNASEK-C17orf49                      17 ## 10                2                  C2orf68                       2 ## 17                4                  C4orf19                       4 ## 41               11                  C11orf1                      11 ## 42                3                  C3orf80                       3 ## 45                8                  C8orf33                       8 ##    entity_type                    category ## 6      protein               intracellular ## 10     protein               intracellular ## 17     protein               intracellular ## 41     protein               intracellular ## 42     protein transmembrane, cell_surface ## 45     protein               intracellular ##                                                  parent consensus_score is_cs ## 6                                         intracellular               1 FALSE ## 10                                        intracellular               1 FALSE ## 17                                        intracellular               1 FALSE ## 41                                        intracellular               3 FALSE ## 42 transmembrane_predicted, cell_surface, transmembrane               4  TRUE ## 45                                        intracellular               1 FALSE ##                                                    database_cs is_tf ## 6                                             OmniPath, ComPPI FALSE ## 10                                            OmniPath, ComPPI FALSE ## 17                                            ComPPI, OmniPath FALSE ## 41                     ComPPI, OmniPath, UniProt, GO_Intercell FALSE ## 42 Phobius, OmniPath, Ramilowski_location, Surfaceome, UniProt FALSE ## 45                                            ComPPI, OmniPath FALSE ##    database_tf ## 6         <NA> ## 10        <NA> ## 17        <NA> ## 41        <NA> ## 42        <NA> ## 45        <NA>"},{"path":"https://hungms.github.io/strpip/articles/strpip.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Get Started","text":"","code":"sessionInfo() ## R version 4.4.3 (2025-02-28) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] strpip_0.1.1     biomaRt_2.62.1   OmnipathR_3.14.0 magrittr_2.0.3   ## [5] rlang_1.1.5      stringr_1.5.1    tibble_3.2.1     tidyr_1.3.1      ## [9] dplyr_1.1.4      ##  ## loaded via a namespace (and not attached): ##  [1] KEGGREST_1.46.0         httr2_1.1.2             xfun_0.52               ##  [4] bslib_0.9.0             Biobase_2.66.0          tzdb_0.5.0              ##  [7] vctrs_0.6.5             tools_4.4.3             generics_0.1.3          ## [10] stats4_4.4.3            curl_6.2.2              AnnotationDbi_1.68.0    ## [13] RSQLite_2.3.9           blob_1.2.4              pkgconfig_2.0.3         ## [16] R.oo_1.27.0             checkmate_2.3.2         dbplyr_2.5.0            ## [19] S4Vectors_0.44.0        desc_1.4.3              readxl_1.4.5            ## [22] GenomeInfoDbData_1.2.13 lifecycle_1.0.4         compiler_4.4.3          ## [25] Biostrings_2.74.1       textshaping_1.0.0       progress_1.2.3          ## [28] GenomeInfoDb_1.42.3     htmltools_0.5.8.1       sass_0.4.9              ## [31] yaml_2.3.10             pillar_1.10.2           pkgdown_2.1.1           ## [34] later_1.4.1             crayon_1.5.3            jquerylib_0.1.4         ## [37] R.utils_2.13.0          cachem_1.1.0            zip_2.3.2               ## [40] tidyselect_1.2.1        rvest_1.0.4             digest_0.6.37           ## [43] stringi_1.8.7           purrr_1.0.4             fastmap_1.2.0           ## [46] cli_3.6.4               logger_0.4.0            XML_3.99-0.18           ## [49] withr_3.0.2             readr_2.1.5             filelock_1.0.3          ## [52] UCSC.utils_1.2.0        prettyunits_1.2.0       backports_1.5.0         ## [55] rappdirs_0.3.3          bit64_4.6.0-1           lubridate_1.9.4         ## [58] timechange_0.3.0        XVector_0.46.0          rmarkdown_2.29          ## [61] httr_1.4.7              igraph_2.1.4            bit_4.6.0               ## [64] cellranger_1.1.0        png_0.1-8               ragg_1.3.3              ## [67] R.methodsS3_1.8.2       hms_1.1.3               memoise_2.0.1           ## [70] evaluate_1.0.3          knitr_1.50              IRanges_2.40.1          ## [73] BiocFileCache_2.14.0    Rcpp_1.0.14             glue_1.8.0              ## [76] DBI_1.2.3               xml2_1.3.8              BiocGenerics_0.52.0     ## [79] jsonlite_2.0.0          R6_2.6.1                zlibbioc_1.52.0         ## [82] systemfonts_1.2.2       fs_1.6.5"},{"path":"https://hungms.github.io/strpip/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hung M. Author, maintainer.","code":""},{"path":"https://hungms.github.io/strpip/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"M H (2025). strpip: Data Structure Pipelines Genomic Analysis. R package version 0.1.1, https://hungms.github.io/strpip/, https://hungms.github.io/deseq2pip/.","code":"@Manual{,   title = {strpip: Data Structure Pipelines for Genomic Analysis},   author = {Hung M},   year = {2025},   note = {R package version 0.1.1, https://hungms.github.io/strpip/},   url = {https://hungms.github.io/deseq2pip/}, }"},{"path":"https://hungms.github.io/strpip/index.html","id":"strpip-data-structure-pipelines-for-genomic-analysis","dir":"","previous_headings":"","what":"Data Structure Pipelines for Genomic Analysis","title":"Data Structure Pipelines for Genomic Analysis","text":"comprehensive R package genomic data structure pipelines, providing tools data format conversions, gene symbol mapping, gene set operations, expression data processing, functional annotation integration.","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Data Structure Pipelines for Genomic Analysis","text":"detailed documentation examples, please visit latest documentation.","code":""},{"path":[]},{"path":"https://hungms.github.io/strpip/index.html","id":"gene-symbol-mapping","dir":"","previous_headings":"Features","what":"Gene Symbol Mapping","title":"Data Structure Pipelines for Genomic Analysis","text":"Convert human mouse gene symbols Map different gene ID types","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"specialized-gene-set-operations","dir":"","previous_headings":"Features","what":"Specialized Gene Set Operations","title":"Data Structure Pipelines for Genomic Analysis","text":"Identify X/Y chromosome genes Find mitochondrial genes Filter structural genes Perform set operations gene lists","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"expression-processing","dir":"","previous_headings":"Features","what":"Expression Processing","title":"Data Structure Pipelines for Genomic Analysis","text":"Summarize gene expression data Filter normalize expression matrices Handle duplicate gene entries","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"functional-annotation","dir":"","previous_headings":"Features","what":"Functional Annotation","title":"Data Structure Pipelines for Genomic Analysis","text":"Integrate pathway annotations Access OmniPath resources Perform enrichment analyses","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"data-format-operations","dir":"","previous_headings":"Features","what":"Data Format Operations","title":"Data Structure Pipelines for Genomic Analysis","text":"Read write GCT (Gene Cluster Text) files Read write GMT (Gene Matrix Transposed) files Convert different genomic data formats","code":""},{"path":"https://hungms.github.io/strpip/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data Structure Pipelines for Genomic Analysis","text":"can install development version strpip GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"hungms/strpip\")"},{"path":"https://hungms.github.io/strpip/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Data Structure Pipelines for Genomic Analysis","text":"package requires following dependencies, can installed : packages provide: - biomaRt: Access Ensembl BioMart databases - dplyr, tidyr, tibble, stringr: Data manipulation tools - magrittr: pipe operations - OmnipathR: Access protein interaction networks pathway data","code":"# Install CRAN packages install.packages(c(\"dplyr\", \"tidyr\", \"tibble\", \"stringr\", \"magrittr\"))  # Install Bioconductor packages if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(c(\"biomaRt\", \"OmnipathR\"))"},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for BCR genes — bcr.string","title":"Regular expression pattern for BCR genes — bcr.string","text":"Pattern identify B-cell receptor genes","code":""},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for BCR genes — bcr.string","text":"","code":"bcr.string"},{"path":"https://hungms.github.io/strpip/reference/bcr.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for BCR genes — bcr.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_human_to_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","title":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","text":"Converts list human (HGNC) gene symbols mouse (MGI) equivalents. default, returns one--one mappings ensure accuracy.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_human_to_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","text":"","code":"convert_human_to_mouse(genes)"},{"path":"https://hungms.github.io/strpip/reference/convert_human_to_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","text":"genes vector human gene symbols convert one..many Logical. Default FALSE return unique mappings (one/many one). TRUE, returns possible mouse gene mappings (one many), including cases one human gene maps multiple mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_human_to_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","text":"one..many = FALSE, returns vector unique mouse gene symbols. one..many = TRUE, returns data frame possible mappings.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_human_to_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert human gene symbols to mouse gene symbols — convert_human_to_mouse","text":"","code":"if (FALSE) { # \\dontrun{ human_genes <- c(\"TP53\", \"CD4\", \"CD8A\") mouse_genes <- convert_human_to_mouse(human_genes) print(mouse_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/convert_list_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert List to Data Frame — convert_list_to_df","title":"Convert List to Data Frame — convert_list_to_df","text":"Converts list vectors data frame, padding shorter vectors empty strings match length longest vector.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_list_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert List to Data Frame — convert_list_to_df","text":"","code":"convert_list_to_df(list)"},{"path":"https://hungms.github.io/strpip/reference/convert_list_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert List to Data Frame — convert_list_to_df","text":"list list vectors convert","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_list_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert List to Data Frame — convert_list_to_df","text":"data frame column corresponds vector input list. Shorter vectors padded empty strings match length longest vector.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_list_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert List to Data Frame — convert_list_to_df","text":"","code":"if (FALSE) { # \\dontrun{ my_list <- list(c(\"A\", \"B\", \"C\"), c(\"D\", \"E\"), c(\"F\", \"G\", \"H\", \"I\")) result <- convert_list_to_df(my_list) print(result) } # }"},{"path":"https://hungms.github.io/strpip/reference/convert_mouse_to_human.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","title":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","text":"Converts vector mouse (MGI) gene symbols human (HGNC) equivalents. default, returns data frame possible mappings.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_mouse_to_human.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","text":"","code":"convert_mouse_to_human(genes)"},{"path":"https://hungms.github.io/strpip/reference/convert_mouse_to_human.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","text":"genes vector mouse gene symbols convert","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_mouse_to_human.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","text":"data frame possible mappings.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_mouse_to_human.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert mouse gene symbols to human gene symbols — convert_mouse_to_human","text":"","code":"if (FALSE) { # \\dontrun{ mouse_genes <- c(\"Trp53\", \"Cd4\", \"Cd8a\") human_genes <- convert_mouse_to_human(mouse_genes) print(human_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert orthologs between human and mouse for a data frame — convert_orthologs_df","title":"Convert orthologs between human and mouse for a data frame — convert_orthologs_df","text":"Converts data frame gene symbols human mouse species.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert orthologs between human and mouse for a data frame — convert_orthologs_df","text":"","code":"convert_orthologs_df(df, gene_column, mode = \"human_to_mouse\")"},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert orthologs between human and mouse for a data frame — convert_orthologs_df","text":"df data frame gene symbols convert mode direction conversion, either \"human_to_mouse\" \"mouse_to_human\" many..one Logical. Default FALSE return unique mappings (one/many one). TRUE, returns possible mouse gene mappings (one many), including cases one human gene maps multiple mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","title":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","text":"Converts matrix gene symbols human mouse species.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","text":"","code":"convert_orthologs_matrix(   matrix,   mode = \"human_to_mouse\",   many.to.one = TRUE,   normalized = FALSE )"},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","text":"matrix matrix gene symbols convert mode direction conversion, either \"human_to_mouse\" \"mouse_to_human\" many..one Logical. Default FALSE return unique mappings (one/many one). TRUE, returns possible mouse gene mappings (one many), including cases one human gene maps multiple mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","text":"matrix converted gene symbols","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert orthologs between human and mouse for an gene expression matrix — convert_orthologs_matrix","text":"","code":"if (FALSE) { # \\dontrun{ matrix <- matrix(rnorm(100), nrow = 20, ncol = 5) rownames(matrix) <- c(\"gene1\", \"gene2\", \"gene3\", \"gene4\", \"gene5\") colnames(matrix) <- c(\"sample1\", \"sample2\", \"sample3\", \"sample4\", \"sample5\")  human_matrix <- convert_orthologs_matrix(matrix, mode = \"human_to_mouse\", many.to.one = TRUE) mouse_matrix <- convert_orthologs_matrix(matrix, mode = \"mouse_to_human\", many.to.one = TRUE) } # }"},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","title":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","text":"Converts vector gene symbols human mouse species.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","text":"","code":"convert_orthologs_vector(genes, mode = \"human_to_mouse\", one.to.many = TRUE)"},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","text":"genes vector gene symbols convert mode direction conversion, either \"human_to_mouse\" \"mouse_to_human\" one..many Logical. Default FALSE return unique mappings (one/many one). TRUE, returns possible mouse gene mappings (one many), including cases one human gene maps multiple mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","text":"vector converted gene symbols","code":""},{"path":"https://hungms.github.io/strpip/reference/convert_orthologs_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert orthologs between human and mouse for a vector of genes — convert_orthologs_vector","text":"","code":"if (FALSE) { # \\dontrun{ mouse_genes <- c(\"Trp53\", \"Cd4\", \"Cd8a\") human_genes <- convert_orthologs_vector(mouse_genes, mode = \"mouse_to_human\", one.to.many = TRUE) print(human_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Package startup message — .onAttach","title":"Package startup message — .onAttach","text":"Displays package version package attached","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package startup message — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://hungms.github.io/strpip/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package startup message — .onAttach","text":"libname library package installed pkgname name package","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize package when loaded — .onLoad","title":"Initialize package when loaded — .onLoad","text":"function called package loaded via library() require()","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize package when loaded — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"https://hungms.github.io/strpip/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize package when loaded — .onLoad","text":"libname library package installed pkgname name package","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Package Environment — .strpip_env","title":"Internal Package Environment — .strpip_env","text":"environment used store package-level data needs persist function calls without polluting user's global environment.","code":""},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Package Environment — .strpip_env","text":"","code":".strpip_env"},{"path":"https://hungms.github.io/strpip/reference/dot-strpip_env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Internal Package Environment — .strpip_env","text":"object class environment length 0.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes from mitochondrial chromosome — get_mt_genes","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"Retrieves gene symbols located mitochondrial chromosome specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"","code":"get_mt_genes(org = \"human\", ...)"},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"org Organism query. Either \"human\" \"mouse\". Default \"human\". ... Additional arguments passed import_biomart_human import_biomart_mouse.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"character vector containing mitochondrial gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_mt_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes from mitochondrial chromosome — get_mt_genes","text":"","code":"if (FALSE) { # \\dontrun{ mt_genes <- get_mt_genes(\"human\") head(mt_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes matching specific patterns — get_str_genes","title":"Get genes matching specific patterns — get_str_genes","text":"Retrieves gene symbols matching predefined patterns specific gene families (BCR, TCR, MHC, HB, RB, MT) specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes matching specific patterns — get_str_genes","text":"","code":"get_str_genes(org = \"human\", str = c(\"rb\"), ...)"},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes matching specific patterns — get_str_genes","text":"org Organism query. Either \"human\" \"mouse\". Default \"human\". str Character vector patterns search . Valid options : \"bcr\", \"tcr\", \"mhc\", \"hb\", \"rb\", \"mt\". Default \"rb\".","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes matching specific patterns — get_str_genes","text":"character vector containing matching gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_str_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes matching specific patterns — get_str_genes","text":"","code":"if (FALSE) { # \\dontrun{ rb_genes <- get_str_genes(\"human\", \"rb\") head(rb_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get genes from X and Y chromosomes — get_xy_genes","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"Retrieves gene symbols located X Y chromosomes specified organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"","code":"get_xy_genes(org = \"human\", ...)"},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"org Organism query. Either \"human\" \"mouse\". Default \"human\". ... Additional arguments passed import_biomart_human import_biomart_mouse.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"character vector containing gene symbols X Y chromosomes.","code":""},{"path":"https://hungms.github.io/strpip/reference/get_xy_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get genes from X and Y chromosomes — get_xy_genes","text":"","code":"if (FALSE) { # \\dontrun{ xy_genes <- get_xy_genes(\"human\") head(xy_genes) } # }"},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for hemoglobin genes — hb.string","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"Pattern identify hemoglobin genes","code":""},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"","code":"hb.string"},{"path":"https://hungms.github.io/strpip/reference/hb.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for hemoglobin genes — hb.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart_human","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"","code":"import_biomart_human(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_human.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart_human","text":"","code":"if (FALSE) { # \\dontrun{ biomart_dict_mouse <- import_biomart_mouse() head(biomart_dict_mouse) } # }"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart_mouse","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"","code":"import_biomart_mouse(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart_mouse","text":"","code":"if (FALSE) { # \\dontrun{ biomart_dict_mouse <- import_biomart_mouse() head(biomart_dict_mouse) } # }"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_orthologs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import BioMart data from Ensembl archive — import_biomart_orthologs","title":"Import BioMart data from Ensembl archive — import_biomart_orthologs","text":"Retrieves archived ensembl biomarts web creates mapping dictionary human mouse genes.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_orthologs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import BioMart data from Ensembl archive — import_biomart_orthologs","text":"","code":"import_biomart_orthologs(   host = \"https://dec2021.archive.ensembl.org\",   local = TRUE,   release = \"105\" )"},{"path":"https://hungms.github.io/strpip/reference/import_biomart_orthologs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import BioMart data from Ensembl archive — import_biomart_orthologs","text":"host URL retrieve archived ensembl biomarts. Default December 2021 archive.","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_orthologs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import BioMart data from Ensembl archive — import_biomart_orthologs","text":"data frame containing gene mappings chromosome information","code":""},{"path":"https://hungms.github.io/strpip/reference/import_biomart_orthologs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import BioMart data from Ensembl archive — import_biomart_orthologs","text":"","code":"if (FALSE) { # \\dontrun{ biomart_dict <- import_biomart_orthologs() head(biomart_dict) } # }"},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for MHC genes — mhc.string","title":"Regular expression pattern for MHC genes — mhc.string","text":"Pattern identify major histocompatibility complex genes","code":""},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for MHC genes — mhc.string","text":"","code":"mhc.string"},{"path":"https://hungms.github.io/strpip/reference/mhc.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for MHC genes — mhc.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for mitochondrial genes — mt.string","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"Pattern identify mitochondrial genes","code":""},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"","code":"mt.string"},{"path":"https://hungms.github.io/strpip/reference/mt.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for mitochondrial genes — mt.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://hungms.github.io/strpip/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for ribosomal genes — rb.string","title":"Regular expression pattern for ribosomal genes — rb.string","text":"Pattern identify ribosomal protein genes","code":""},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for ribosomal genes — rb.string","text":"","code":"rb.string"},{"path":"https://hungms.github.io/strpip/reference/rb.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for ribosomal genes — rb.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GCT File — read_gct","title":"Read GCT File — read_gct","text":"Reads Gene Cluster Text (GCT) file converts data frame. GCT files commonly used gene expression data.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GCT File — read_gct","text":"","code":"read_gct(gct)"},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GCT File — read_gct","text":"gct Path GCT file","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GCT File — read_gct","text":"data frame : - Rows genes - Columns samples - Values expression measurements","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GCT File — read_gct","text":"","code":"if (FALSE) { # \\dontrun{ gct_data <- read_gct(\"path/to/expression.gct\") head(gct_data) } # }"},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read GMT File — read_gmt","title":"Read GMT File — read_gmt","text":"Reads Gene Matrix Transposed (GMT) file converts data frame. GMT files commonly used gene set collections.","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read GMT File — read_gmt","text":"","code":"read_gmt(gmt)"},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read GMT File — read_gmt","text":"gmt Path GMT file","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read GMT File — read_gmt","text":"data frame : - Rows genes - Columns gene sets - Values indicate gene set membership","code":""},{"path":"https://hungms.github.io/strpip/reference/read_gmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read GMT File — read_gmt","text":"","code":"if (FALSE) { # \\dontrun{ gmt_data <- read_gmt(\"path/to/genesets.gmt\") head(gmt_data) } # }"},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Gene Annotations — run_annotation","title":"Add Gene Annotations — run_annotation","text":"Adds functional annotations data frame containing gene symbols using pre-computed OmniPath annotations. function supports human mouse gene symbols.","code":""},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Gene Annotations — run_annotation","text":"","code":"run_annotation(df, gene_column = \"gene\", org = \"human\", release = \"105\")"},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Gene Annotations — run_annotation","text":"df Data frame containing gene symbols gene_column Name column containing gene symbols. Default \"gene\" org Organism type. Either \"human\" \"mouse\". Default \"human\" release Ensembl release version use annotations. Default \"105\"","code":""},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Gene Annotations — run_annotation","text":"data frame additional columns containing functional annotations: - Pathway information - Protein-protein interactions - Gene regulatory relationships - functional annotations OmniPath","code":""},{"path":"https://hungms.github.io/strpip/reference/run_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Gene Annotations — run_annotation","text":"","code":"# \\donttest{ # Create example data frame with human genes expression_df <- data.frame(   gene = c(\"TP53\", \"BRCA1\", \"EGFR\"),   expression = c(1.2, 0.8, 2.1) )  # Annotate human genes annotated_df <- run_annotation(expression_df, gene_column = \"gene\", org = \"human\")  # Create example data frame with mouse genes mouse_df <- data.frame(   gene = c(\"Trp53\", \"Brca1\", \"Egfr\"),   expression = c(1.2, 0.8, 2.1) )  # Annotate mouse genes annotated_df <- run_annotation(mouse_df, gene_column = \"gene\", org = \"mouse\") # }"},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":null,"dir":"Reference","previous_headings":"","what":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"comprehensive R package genomic data structure pipelines, providing tools : Data format conversions (GCT, GMT, TSV) Gene symbol mapping species Gene set operations filtering Gene expression data processing Functional annotation integration Specialized gene set identification (XY, MT, BCR, TCR, etc.)","code":""},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main functions","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"Data Format Operations read_gmt(), read_gct(), write_gmt(), write_gct() Gene Symbol Mapping convert_mouse_to_human(), convert_human_to_mouse() Gene Set Operations get_xy_genes(), get_mt_genes(), get_str_genes() Expression Processing summarize_genes() Annotation run_annotation()","code":""},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"dependencies","dir":"Reference","previous_headings":"","what":"Dependencies","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"package depends : biomaRt: accessing Ensembl BioMart dplyr, tidyr, tibble, stringr: data manipulation magrittr: pipe operations OmniPathR: pathway data","code":""},{"path":[]},{"path":"https://hungms.github.io/strpip/reference/strpip-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"strpip: Data Structure Pipelines for Genomic Analysis — strpip-package","text":"Maintainer: Hung M hungm@example.com","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Gene Expression — summarize_genes","title":"Summarize Gene Expression — summarize_genes","text":"function aggregates expression values multiple isoforms gene single gene-level expression value. can either sum average isoform expression values gene.","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Gene Expression — summarize_genes","text":"","code":"summarize_genes(df, gene_sym_vec, normalized = FALSE)"},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Gene Expression — summarize_genes","text":"df Gene expression dataframe isoforms/peaks rows samples columns gene_sym_vec Vector gene symbols corresponding isoform/peak normalized Logical. TRUE, calculates mean expression across isoforms/peaks. FALSE, calculates sum expression across isoforms/peaks. Default FALSE","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Gene Expression — summarize_genes","text":"gene expression dataframe unique gene names row names","code":""},{"path":"https://hungms.github.io/strpip/reference/summarize_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Gene Expression — summarize_genes","text":"","code":"# Create example data isoform_expr <- data.frame(   sample1 = c(10, 20, 15, 30),   sample2 = c(12, 25, 18, 35),   row.names = c(\"isoform1\", \"isoform2\", \"isoform3\", \"isoform4\") ) gene_symbols <- c(\"geneA\", \"geneA\", \"geneB\", \"geneB\")  # Sum isoform/peak expression gene_expr <- summarize_genes(isoform_expr, gene_symbols)  # Average isoform/peak expression gene_expr <- summarize_genes(isoform_expr, gene_symbols, normalized = TRUE)"},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":null,"dir":"Reference","previous_headings":"","what":"Regular expression pattern for TCR genes — tcr.string","title":"Regular expression pattern for TCR genes — tcr.string","text":"Pattern identify T-cell receptor genes","code":""},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regular expression pattern for TCR genes — tcr.string","text":"","code":"tcr.string"},{"path":"https://hungms.github.io/strpip/reference/tcr.string.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Regular expression pattern for TCR genes — tcr.string","text":"object class character length 1.","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_gene_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Gene Symbols Are Valid — validate_gene_symbols","title":"Check if Gene Symbols Are Valid — validate_gene_symbols","text":"Internal function check gene symbols valid given organism.","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_gene_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Gene Symbols Are Valid — validate_gene_symbols","text":"","code":"validate_gene_symbols(genes, org = \"human\")"},{"path":"https://hungms.github.io/strpip/reference/validate_gene_symbols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Gene Symbols Are Valid — validate_gene_symbols","text":"genes Character vector gene symbols check org Organism type, either \"human\" \"mouse\"","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_gene_symbols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Gene Symbols Are Valid — validate_gene_symbols","text":"Logical indicating whether genes valid","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_organism.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Organism Parameter — validate_organism","title":"Validate Organism Parameter — validate_organism","text":"Internal function validate organism parameter.","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_organism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Organism Parameter — validate_organism","text":"","code":"validate_organism(org)"},{"path":"https://hungms.github.io/strpip/reference/validate_organism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Organism Parameter — validate_organism","text":"org Organism validate","code":""},{"path":"https://hungms.github.io/strpip/reference/validate_organism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Organism Parameter — validate_organism","text":"validated organism error invalid","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GCT File — write_gct","title":"Write GCT File — write_gct","text":"Saves data frame Gene Cluster Text (GCT) file. output file formatted according GCT specification.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GCT File — write_gct","text":"","code":"write_gct(df, save_name = \"\", save_dir = getwd())"},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GCT File — write_gct","text":"df Data frame save save_name Name output file save_dir Directory save file . Defaults current working directory.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GCT File — write_gct","text":"return value. Creates GCT file specified location.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GCT File — write_gct","text":"","code":"if (FALSE) { # \\dontrun{ write_gct(expression_df, \"my_expression.gct\", \"output/\") } # }"},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Write GMT File — write_gmt","title":"Write GMT File — write_gmt","text":"Saves data frame Gene Matrix Transposed (GMT) file. output file formatted according GMT specification.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write GMT File — write_gmt","text":"","code":"write_gmt(df, save_name = \"\", save_dir = getwd())"},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write GMT File — write_gmt","text":"df Data frame save save_name Name output file save_dir Directory save file . Defaults current working directory.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write GMT File — write_gmt","text":"return value. Creates GMT file specified location.","code":""},{"path":"https://hungms.github.io/strpip/reference/write_gmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write GMT File — write_gmt","text":"","code":"if (FALSE) { # \\dontrun{ write_gmt(gene_sets_df, \"my_genesets.gmt\", \"output/\") } # }"}]
